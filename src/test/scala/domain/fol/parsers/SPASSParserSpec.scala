package domain.fol.parsers

/**
 * User: nowi
 * Date: 28.11.2009
 * Time: 12:08:56
 */

import com.jteigen.scalatest.JUnit4Runner

import org.junit.runner.RunWith


import org.scalatest.matchers.ShouldMatchers
import org.scalatest.Spec

@RunWith(classOf[JUnit4Runner])
class SPASSParserSpec extends Spec with ShouldMatchers {
  describe("A SPASSParser") {
//    it("should parse example problem pelletier57 from spass spec 1.5") {
//      val text: String = "beginproblem(Pelletier57). listofdescriptions. name({' Pelletiers Problem No. 57 '}). author({' Christoph Weidenbach '}). status(unsatisfiable). description({' Problem taken in revised form from the Pelletier Collection, Journal of Automated Reasoning, Vol. 2, No. 2, pages 191-216 '}). endoflist. listofsymbols. functions[(f, 2), (a, 0), (b, 0), (c, 0)]. predicates[(F, 2)]. endoflist. listofformulae(axioms). formula(F(f(a,b),f(b,c))). formula(F(f(b,c),f(a,c))). formula(forall([U,V,W],implies(and(F(U,V),F(V,W)),F(U,W)))). endoflist. listofformulae(conjectures). formula(F(f(a,b),f(a,c))). endoflist. endproblem."
//      // parse
//      assert(SPASSParser.parse(text))
//
//    }
    //
    //



    it("should parse example problem pelletier57 from spass spec 1.5") {
      val text: String = """begin_problem(Pelletier54).

list_of_descriptions.
name({*Pelletier's Problem No. 54*}).
author({*Christoph Weidenbach*}).
status(unsatisfiable).
description({*Problem taken in revised form from the "Pelletier Collection", Journal of Automated
	Reasoning, Vol. 2, No. 2, pages 191-216*}).
end_of_list.

list_of_symbols.
  predicates[(F,2)].
end_of_list.

list_of_formulae(axioms).

formula(forall([U],exists([V],forall([W],equiv(F(W,V),equal(W,U)))))).
end_of_list.

list_of_formulae(conjectures).

formula(not(exists([U],forall([V],equiv(F(V,U),forall([W],implies(F(V,W),exists([X],and(F(X,W),not(exists([Y],and(F(Y,W),F(Y,X))))))))))))).

end_of_list.

end_problem."""
      // parse
      assert(SPASSParser.parse(text))

    }

    it("should parse sokrates example") {
      val text: String = """begin_problem(Sokrates1).

list_of_descriptions.
name({*Sokrates*}).
author({*Christoph Weidenbach*}).
status(unsatisfiable).
description({* Sokrates is mortal and since all humans are mortal, he is mortal too. *}).
end_of_list.

list_of_symbols.
  functions[(sokrates,0)].
  predicates[(Human,1),(Mortal,1)].
end_of_list.

list_of_formulae(axioms).

formula(Human(sokrates),1).
formula(forall([x],implies(Human(x),Mortal(x))),2).

end_of_list.

list_of_formulae(conjectures).

formula(Mortal(sokrates),3).

end_of_list.

end_problem."""
      // parse
      assert(SPASSParser.parse(text))

    }

    //    it("should parse the partiitioned amino example") {
    //      val text: String = """beginproblem(SomeProblem). listofdescriptions. name({' BLAH '}). author({' BLAH '}). status(unknown). description({' module 0 of 1 '}). endoflist. listofsymbols. functions[(tt, 0), (skf00, 1), (skf01, 1), (skf02, 1), (skf03, 1), (skf04, 1), (skf05, 1), (skf06, 1), (skf07, 1), (skf08, 1), (skf09, 1), (skf010, 1), (skf011, 1), (skf012, 1), (skf013, 1), (skf014, 1), (skf015, 1), (skf016, 1), (skf017, 1), (skf018, 1), (skf019, 1), (skf020, 1), (skf021, 1), (skf022, 1), (skf023, 1), (skf024, 1), (skf025, 1), (skf026, 1), (skf027, 1), (skf028, 1), (skf029, 1), (skf030, 1), (skf031, 1), (skf032, 1), (skf033, 1), (skf034, 1), (skf035, 1), (skf036, 1), (skf037, 1), (skf038, 1), (skf039, 1), (skf040, 1), (skf041, 1), (skf042, 1), (skf043, 1), (skf044, 1), (skf045, 1), (skf046, 1), (skf047, 1), (skf048, 1), (skf049, 1), (skf050, 1), (skf051, 1), (skf052, 1), (skf053, 1), (skf054, 1), (skf055, 1), (skf056, 1), (skf057, 1), (skf058, 1), (skf059, 1), (skf060, 1), (skf061, 1), (skf062, 1), (skf063, 1), (skf064, 1), (skf065, 1), (skf066, 1), (skf067, 1), (skf068, 1), (skf069, 1), (skf070, 1), (skf071, 1), (skf072, 1), (skf073, 1), (skf074, 1), (skf075, 1), (skf076, 1), (skf077, 1), (skf078, 1), (skf079, 1), (skf080, 1), (skf081, 1), (skf082, 1), (skf083, 1), (skf084, 1), (skf085, 1), (skf086, 1), (skf087, 1), (skf088, 1), (skf089, 1), (skf090, 1), (skf091, 1), (skf092, 1), (skf093, 1), (skf094, 1), (skf095, 1), (skf096, 1), (skf097, 1), (skf098, 1), (skf099, 1), (skf0100, 1), (skf0101, 1), (skf0102, 1), (skf0103, 1), (skf0104, 1), (skf0105, 1), (skf0106, 1), (skf0107, 1), (skf0108, 1), (skf0109, 1), (skf0110, 1), (skf0111, 1), (skf0112, 1), (skf0113, 1), (skf0114, 1), (skf0115, 1), (skf0116, 1), (skf0117, 1), (skf0118, 1), (skf0119, 1), (skf0120, 1), (skf0121, 1), (skf0122, 1), (skf0123, 1), (skf0124, 1), (skf0125, 1), (skf0126, 1), (skf0127, 1), (skf0128, 1), (skf0129, 1), (skf0130, 1), (skf0131, 1), (skf0132, 1), (skf0133, 1), (skf0134, 1), (skf0135, 1), (skf0136, 1), (skf0137, 1), (skf0138, 1), (skf0139, 1), (skf0140, 1), (skf0141, 1), (skf0142, 1), (skf0143, 1), (skf0144, 1), (skf0145, 1), (skf0146, 1), (skf0147, 1), (skf0148, 1), (skf0149, 1), (skf0150, 1), (skf0151, 1), (skf0152, 1), (skf0153, 1), (skf0154, 1), (skf0155, 1), (skf0156, 1), (skf0157, 1), (skf0158, 1), (skf0159, 1), (skf0160, 1), (skf0161, 1), (skf0162, 1), (skf0163, 1), (skf0164, 1), (skf0165, 1), (skf0166, 1), (skf0167, 1), (skf0168, 1), (skf0169, 1), (skf0170, 1), (skf0171, 1), (skf0172, 1), (skf0173, 1), (skf0174, 1), (skf0175, 1), (skf0176, 1), (skf0177, 1), (skf0178, 1), (skf0179, 1), (skf0180, 1), (skf0181, 1), (skf0182, 1), (skf0183, 1), (skf0184, 1), (skf0185, 1), (skf0186, 1), (skf0187, 1), (skf0188, 1), (skf0189, 1), (skf0190, 1), (skf0191, 1), (skf0192, 1), (skf0193, 1), (skf0194, 1), (skf0195, 1), (skf0196, 1), (skf0197, 1), (skf0198, 1), (skf0199, 1), (skf0200, 1), (skf0201, 1), (skf0202, 1), (skf0203, 1), (skf0204, 1), (skf0205, 1), (skf0206, 1), (skf0207, 1), (skf0208, 1), (skf0209, 1), (skf0210, 1), (skf0211, 1), (skf0212, 1), (skf0213, 1), (skf0214, 1), (skf0215, 1)]. predicates[(Pp, 0), (P, 1), (Ep, 0), (E, 1), (NEWATOMIC7p, 0), (NEWATOMIC7, 1), (Fp, 0), (F, 1), (Hydrophobicp, 0), (Hydrophobic, 1), (NEWATOMIC11p, 0), (NEWATOMIC11, 1), (NEWATOMIC4p, 0), (NEWATOMIC4, 1), (Ap, 0), (A, 1), (LargeAliphaticAminoAcidp, 0), (LargeAliphaticAminoAcid, 1), (Cp, 0), (C, 1), (hasSideChainStructurep, 0), (hasSideChainStructure, 2), (NEWATOMIC29p, 0), (NEWATOMIC29, 1), (NEWATOMIC5p, 0), (NEWATOMIC5, 1), (PositiveChargedAminoAcidp, 0), (PositiveChargedAminoAcid, 1), (Polarp, 0), (Polar, 1), (NEWATOMIC2p, 0), (NEWATOMIC2, 1), (hasPolarityp, 0), (hasPolarity, 2), (NEWATOMIC0p, 0), (NEWATOMIC0, 1), (hasSizep, 0), (hasSize, 2), (NEWATOMIC22p, 0), (NEWATOMIC22, 1), (Hydrophobicityp, 0), (Hydrophobicity, 1), (NEWATOMIC10p, 0), (NEWATOMIC10, 1), (NEWATOMIC1p, 0), (NEWATOMIC1, 1), (Neutralp, 0), (Neutral, 1), (NEWATOMIC21p, 0), (NEWATOMIC21, 1), (NEWATOMIC31p, 0), (NEWATOMIC31, 1), (Rp, 0), (R, 1), (Yp, 0), (Y, 1), (hasChargep, 0), (hasCharge, 2), (Ip, 0), (I, 1), (Positivep, 0), (Positive, 1), (NEWATOMIC26p, 0), (NEWATOMIC26, 1), (NEWATOMIC25p, 0), (NEWATOMIC25, 1), (NEWATOMIC23p, 0), (NEWATOMIC23, 1), (AromaticAminoAcidp, 0), (AromaticAminoAcid, 1), (Gp, 0), (G, 1), (Np, 0), (N, 1), (NEWATOMIC3p, 0), (NEWATOMIC3, 1), (Largep, 0), (Large, 1), (hasHydrophobicityp, 0), (hasHydrophobicity, 2), (NEWATOMIC30p, 0), (NEWATOMIC30, 1), (Qp, 0), (Q, 1), (NEWATOMIC18p, 0), (NEWATOMIC18, 1), (Aliphaticp, 0), (Aliphatic, 1), (NEWATOMIC28p, 0), (NEWATOMIC28, 1), (NEWATOMIC16p, 0), (NEWATOMIC16, 1), (Tinyp, 0), (Tiny, 1), (NEWATOMIC19p, 0), (NEWATOMIC19, 1), (Dp, 0), (D, 1), (Negativep, 0), (Negative, 1), (Smallp, 0), (Small, 1), (NEWATOMIC8p, 0), (NEWATOMIC8, 1), (AminoAcidp, 0), (AminoAcid, 1), (NonPolarp, 0), (NonPolar, 1), (Hydrophilicp, 0), (Hydrophilic, 1), (Aromaticp, 0), (Aromatic, 1), (NEWATOMIC6p, 0), (NEWATOMIC6, 1), (Vp, 0), (V, 1), (Lp, 0), (L, 1), (Sp, 0), (S, 1), (NEWATOMIC24p, 0), (NEWATOMIC24, 1), (SpecificAminoAcidp, 0), (SpecificAminoAcid, 1), (Chargep, 0), (Charge, 1), (Sizep, 0), (Size, 1), (TinyPolarAminoAcidp, 0), (TinyPolarAminoAcid, 1), (NEWATOMIC27p, 0), (NEWATOMIC27, 1), (NEWATOMIC9p, 0), (NEWATOMIC9, 1), (NEWATOMIC32p, 0), (NEWATOMIC32, 1), (Kp, 0), (K, 1), (AliphaticAminoAcidp, 0), (AliphaticAminoAcid, 1), (RefiningFeaturep, 0), (RefiningFeature, 1), (Wp, 0), (W, 1), (Mp, 0), (M, 1), (Polarityp, 0), (Polarity, 1), (NEWATOMIC13p, 0), (NEWATOMIC13, 1), (Hp, 0), (H, 1), (SideChainStructurep, 0), (SideChainStructure, 1), (NEWATOMIC20p, 0), (NEWATOMIC20, 1), (NEWATOMIC12p, 0), (NEWATOMIC12, 1), (NegativeChargedAminoAcidp, 0), (NegativeChargedAminoAcid, 1), (NEWATOMIC15p, 0), (NEWATOMIC15, 1), (NEWATOMIC17p, 0), (NEWATOMIC17, 1), (NEWATOMIC14p, 0), (NEWATOMIC14, 1), (Tp, 0), (T, 1)]. endoflist. listofclauses(axioms, cnf). clause( -> NEWATOMIC28(U) TinyPolarAminoAcid(U),1). clause( -> NEWATOMIC3(U) Size(U),2). clause( -> NEWATOMIC24(U) Hydrophobicity(U),3). clause( Hydrophobic(U) -> Hydrophobicity(U),4). clause( Polarity(U) -> RefiningFeature(U),5). clause( Large(U) -> Size(U),6). clause( Hydrophilic(U) -> Hydrophobicity(U),7). clause( SideChainStructure(U) -> RefiningFeature(U),8). clause( Size(U) -> RefiningFeature(U),9). clause( Hydrophobicity(U) -> RefiningFeature(U),10). clause( Charge(U) -> RefiningFeature(U),11). clause( Small(U) -> Size(U),12). clause( Tiny(U) -> Size(U),13). clause( T(U) -> SpecificAminoAcid(U),14). clause( T(U) D(U) -> ,15). clause( T(U) Y(U) -> ,16). clause( N(U) -> Small(skf0213(U)),17). clause( W(U) -> Large(skf0212(U)),18). clause( NEWATOMIC0(U) -> Large(skf0211(U)),19). clause( T(U) P(U) -> ,20). clause( T(U) G(U) -> ,21). clause( D(U) -> Hydrophilic(skf0208(U)),22). clause( M(U) -> Large(skf0207(U)),23). clause( L(U) -> Large(skf0206(U)),24). clause( D(U) -> Small(skf0202(U)),25). clause( Y(U) -> Hydrophobic(skf0199(U)),26). clause( Q(U) -> Large(skf0198(U)),27). clause( F(U) -> Hydrophobic(skf0197(U)),28). clause( F(U) -> Large(skf0196(U)),29). clause( R(U) -> Large(skf0192(U)),30). clause( E(U) -> Hydrophilic(skf0189(U)),31). clause( hasSize(U,U1)+ -> Size(U1),32). clause( Large(U) NEWATOMIC3(U) -> ,33). clause( Small(U) NEWATOMIC3(U) -> ,34). clause( Tiny(U) NEWATOMIC3(U) -> ,35). clause( V(U) -> Small(skf0183(U)),36). clause( R(U) -> Hydrophilic(skf0179(U)),37). clause( A(U) -> Hydrophobic(skf0178(U)),38). clause( hasHydrophobicity(U,U1)+ -> Hydrophobicity(U1),39). clause( T(U) H(U) -> ,40). clause( H(U) -> Hydrophilic(skf0175(U)),41). clause( C(U) -> Hydrophobic(skf0173(U)),42). clause( T(U) F(U) -> ,43). clause( I(U) -> Large(skf0170(U)),44). clause( A(U) -> Tiny(skf0169(U)),45). clause( T(U) L(U) -> ,46). clause( NEWATOMIC14(U) -> Tiny(skf0164(U)),47). clause( H(U) -> Large(skf0163(U)),48). clause( T(U) C(U) -> ,49). clause( P(U) -> Hydrophobic(skf0161(U)),50). clause( T(U) K(U) -> ,51). clause( S(U) -> Hydrophilic(skf0159(U)),52). clause( Small(U) Tiny(U) -> ,53). clause( T(U) I(U) -> ,54). clause( T(U) -> Tiny(skf0155(U)),55). clause( C(U) -> Small(skf0154(U)),56). clause( G(U) -> Hydrophobic(skf0150(U)),57). clause( T(U) NEWATOMIC18(U) -> ,58). clause( Y(U) -> Large(skf0148(U)),59). clause( T(U) M(U) -> ,60). clause( S(U) -> Tiny(skf0147(U)),61). clause( K(U) -> Hydrophilic(skf0146(U)),62). clause( T(U) Q(U) -> ,63). clause( Large(U) Small(U) -> ,64). clause( Q(U) -> Hydrophilic(skf0145(U)),65). clause( T(U) R(U) -> ,66). clause( Hydrophobic(U) NEWATOMIC24(U) -> ,67). clause( Hydrophilic(U) NEWATOMIC24(U) -> ,68). clause( T(U) V(U) -> ,69). clause( V(U) -> Hydrophobic(skf0141(U)),70). clause( Hydrophobic(U) Hydrophilic(U) -> ,71). clause( T(U) N(U) -> ,72). clause( E(U) -> Small(skf0140(U)),73). clause( I(U) -> Hydrophobic(skf0135(U)),74). clause( N(U) -> Hydrophilic(skf0134(U)),75). clause( P(U) -> Small(skf0132(U)),76). clause( T(U) A(U) -> ,77). clause( T(U) W(U) -> ,78). clause( T(U) E(U) -> ,79). clause( T(U) S(U) -> ,80). clause( T(U) -> Hydrophilic(skf0123(U)),81). clause( K(U) -> Large(skf0121(U)),82). clause( M(U) -> Hydrophobic(skf0117(U)),83). clause( G(U) -> Tiny(skf0116(U)),84). clause( L(U) -> Hydrophobic(skf0114(U)),85). clause( W(U) -> Hydrophobic(skf0113(U)),86). clause( Large(U) Tiny(U) -> ,87). clause( N(U) -> hasSize(U,skf0213(U)),88). clause( W(U) -> hasSize(U,skf0212(U)),89). clause( NEWATOMIC0(U) -> hasSize(U,skf0211(U)),90). clause( D(U) -> hasHydrophobicity(U,skf0208(U)),91). clause( M(U) -> hasSize(U,skf0207(U)),92). clause( L(U) -> hasSize(U,skf0206(U)),93). clause( D(U) -> hasSize(U,skf0202(U)),94). clause( Y(U) -> hasHydrophobicity(U,skf0199(U)),95). clause( Q(U) -> hasSize(U,skf0198(U)),96). clause( F(U) -> hasHydrophobicity(U,skf0197(U)),97). clause( F(U) -> hasSize(U,skf0196(U)),98). clause( R(U) -> hasSize(U,skf0192(U)),99). clause( E(U) -> hasHydrophobicity(U,skf0189(U)),100). clause( V(U) -> hasSize(U,skf0183(U)),101). clause( R(U) -> hasHydrophobicity(U,skf0179(U)),102). clause( A(U) -> hasHydrophobicity(U,skf0178(U)),103). clause( H(U) -> hasHydrophobicity(U,skf0175(U)),104). clause( C(U) -> hasHydrophobicity(U,skf0173(U)),105). clause( I(U) -> hasSize(U,skf0170(U)),106). clause( A(U) -> hasSize(U,skf0169(U)),107). clause( NEWATOMIC14(U) -> hasSize(U,skf0164(U)),108). clause( H(U) -> hasSize(U,skf0163(U)),109). clause( P(U) -> hasHydrophobicity(U,skf0161(U)),110). clause( S(U) -> hasHydrophobicity(U,skf0159(U)),111). clause( T(U) -> hasSize(U,skf0155(U)),112). clause( C(U) -> hasSize(U,skf0154(U)),113). clause( G(U) -> hasHydrophobicity(U,skf0150(U)),114). clause( Y(U) -> hasSize(U,skf0148(U)),115). clause( S(U) -> hasSize(U,skf0147(U)),116). clause( K(U) -> hasHydrophobicity(U,skf0146(U)),117). clause( Q(U) -> hasHydrophobicity(U,skf0145(U)),118). clause( V(U) -> hasHydrophobicity(U,skf0141(U)),119). clause( E(U) -> hasSize(U,skf0140(U)),120). clause( I(U) -> hasHydrophobicity(U,skf0135(U)),121). clause( N(U) -> hasHydrophobicity(U,skf0134(U)),122). clause( P(U) -> hasSize(U,skf0132(U)),123). clause( hasHydrophobicity(U,U1)+ NEWATOMIC15(U) -> ,124). clause( Hydrophobicity(U) -> Hydrophobic(U) Hydrophilic(U),125). clause( T(U) -> hasHydrophobicity(U,skf0123(U)),126). clause( K(U) -> hasSize(U,skf0121(U)),127). clause( hasSize(U,U1)+ NEWATOMIC7(U) -> ,128). clause( M(U) -> hasHydrophobicity(U,skf0117(U)),129). clause( G(U) -> hasSize(U,skf0116(U)),130). clause( L(U) -> hasHydrophobicity(U,skf0114(U)),131). clause( W(U) -> hasHydrophobicity(U,skf0113(U)),132). clause( hasHydrophobicity(U,U1)+ Y(U) -> Hydrophobic(U1),133). clause( hasHydrophobicity(U,U1)+ L(U) -> Hydrophobic(U1),134). clause( hasSize(U,U1)+ S(U) -> Tiny(U1),135). clause( hasSize(U,U1)+ L(U) -> Large(U1),136). clause( hasSize(U,U1)+ R(U) -> Large(U1),137). clause( hasHydrophobicity(U,U1)+ G(U) -> Hydrophobic(U1),138). clause( hasHydrophobicity(U,U1)+ W(U) -> Hydrophobic(U1),139). clause( hasSize(U,U1)+ Q(U) -> Large(U1),140). clause( hasHydrophobicity(U,U1)+ E(U) -> Hydrophilic(U1),141). clause( hasSize(U,U1)+ T(U) -> Tiny(U1),142). clause( Size(U) -> Small(U) Large(U) Tiny(U),143). clause( hasHydrophobicity(U,U1)+ F(U) -> Hydrophobic(U1),144). clause( hasSize(U,U1)+ K(U) -> Large(U1),145). clause( hasHydrophobicity(U,U1)+ I(U) -> Hydrophobic(U1),146). clause( hasHydrophobicity(U,U1)+ T(U) -> Hydrophilic(U1),147). clause( hasHydrophobicity(U,U1)+ M(U) -> Hydrophobic(U1),148). clause( hasSize(U,U1)+ G(U) -> Tiny(U1),149). clause( hasSize(U,U1)+ E(U) -> Small(U1),150). clause( hasHydrophobicity(U,U1)+ H(U) -> Hydrophilic(U1),151). clause( hasHydrophobicity(U,U1)+ P(U) -> Hydrophobic(U1),152). clause( hasHydrophobicity(U,U1)+ Q(U) -> Hydrophilic(U1),153). clause( hasSize(U,U1)+ I(U) -> Large(U1),154). clause( hasHydrophobicity(U,U1)+ V(U) -> Hydrophobic(U1),155). clause( hasHydrophobicity(U,U1)+ D(U) -> Hydrophilic(U1),156). clause( hasSize(U,U1)+ D(U) -> Small(U1),157). clause( hasSize(U,U1)+ P(U) -> Small(U1),158). clause( hasSize(U,U1)+ F(U) -> Large(U1),159). clause( hasSize(U,U1)+ V(U) -> Small(U1),160). clause( hasSize(U,U1)+ C(U) -> Small(U1),161). clause( hasHydrophobicity(U,U1)+ N(U) -> Hydrophilic(U1),162). clause( hasHydrophobicity(U,U1)+ C(U) -> Hydrophobic(U1),163). clause( hasHydrophobicity(U,U1)+ S(U) -> Hydrophilic(U1),164). clause( hasSize(U,U1)+ A(U) -> Tiny(U1),165). clause( hasSize(U,U1)+ M(U) -> Large(U1),166). clause( hasHydrophobicity(U,U1)+ A(U) -> Hydrophobic(U1),167). clause( hasSize(U,U1)+ N(U) -> Small(U1),168). clause( hasSize(U,U1)+ Y(U) -> Large(U1),169). clause( hasSize(U,U1)+ W(U) -> Large(U1),170). clause( hasSize(U,U1)+ H(U) -> Large(U1),171). clause( hasHydrophobicity(U,U1)+ R(U) -> Hydrophilic(U1),172). clause( hasHydrophobicity(U,U1)+ K(U) -> Hydrophilic(U1),173). clause( Tiny(U) hasSize(U1,U)+ NEWATOMIC26(U1) -> ,174). clause( Large(U) hasSize(U1,U)+ NEWATOMIC9(U1) -> ,175). clause( AminoAcid(U) -> T(U) S(U) L(U) V(U) Q(U) H(U) G(U) N(U) M(U) W(U) K(U) I(U) C(U) Y(U) A(U) R(U) F(U) D(U) E(U) P(U),176). clause( -> AliphaticAminoAcid(U) NEWATOMIC21(U),177). clause( -> Charge(U) NEWATOMIC17(U),178). clause( -> NEWATOMIC31(U) AromaticAminoAcid(U),179). clause( -> NEWATOMIC29(U) AminoAcid(U),180). clause( -> AminoAcid(U) NEWATOMIC32(U),181). clause( -> LargeAliphaticAminoAcid(U) NEWATOMIC10(U),182). clause( -> NEWATOMIC16(U) AminoAcid(U),183). clause( -> AminoAcid(U) NEWATOMIC7(U),184). clause( -> NEWATOMIC18(U) AminoAcid(U),185). clause( -> AminoAcid(U) NEWATOMIC15(U),186). clause( K(U) -> SpecificAminoAcid(U),187). clause( Y(U) -> SpecificAminoAcid(U),188). clause( R(U) -> SpecificAminoAcid(U),189). clause( PositiveChargedAminoAcid(U) -> AminoAcid(U),190). clause( PositiveChargedAminoAcid(U) -> NEWATOMIC2(U),191). clause( LargeAliphaticAminoAcid(U) -> NEWATOMIC0(U),192). clause( LargeAliphaticAminoAcid(U) -> AminoAcid(U),193). clause( LargeAliphaticAminoAcid(U) -> NEWATOMIC1(U),194). clause( NegativeChargedAminoAcid(U) -> AminoAcid(U),195). clause( F(U) -> SpecificAminoAcid(U),196). clause( SpecificAminoAcid(U) -> AminoAcid(U),197). clause( AromaticAminoAcid(U) -> AminoAcid(U),198). clause( AromaticAminoAcid(U) -> NEWATOMIC11(U),199). clause( W(U) -> SpecificAminoAcid(U),200). clause( Neutral(U) -> Charge(U),201). clause( Negative(U) -> Charge(U),202). clause( TinyPolarAminoAcid(U) -> AminoAcid(U),203). clause( S(U) -> SpecificAminoAcid(U),204). clause( G(U) -> SpecificAminoAcid(U),205). clause( N(U) -> SpecificAminoAcid(U),206). clause( P(U) -> SpecificAminoAcid(U),207). clause( Positive(U) -> Charge(U),208). clause( D(U) -> SpecificAminoAcid(U),209). clause( V(U) -> SpecificAminoAcid(U),210). clause( A(U) -> SpecificAminoAcid(U),211). clause( Q(U) -> SpecificAminoAcid(U),212). clause( AliphaticAminoAcid(U) -> AminoAcid(U),213). clause( AliphaticAminoAcid(U) -> NEWATOMIC19(U),214). clause( I(U) -> SpecificAminoAcid(U),215). clause( H(U) -> SpecificAminoAcid(U),216). clause( E(U) -> SpecificAminoAcid(U),217). clause( C(U) -> SpecificAminoAcid(U),218). clause( M(U) -> SpecificAminoAcid(U),219). clause( L(U) -> SpecificAminoAcid(U),220). clause( W(U) Y(U) -> ,221). clause( L(U) F(U) -> ,222). clause( K(U) P(U) -> ,223). clause( W(U) C(U) -> ,224). clause( Positive(U) Neutral(U) -> ,225). clause( R(U) E(U) -> ,226). clause( S(U) H(U) -> ,227). clause( I(U) E(U) -> ,228). clause( I(U) H(U) -> ,229). clause( W(U) K(U) -> ,230). clause( K(U) N(U) -> ,231). clause( I(U) R(U) -> ,232). clause( K(U) C(U) -> ,233). clause( Q(U) M(U) -> ,234). clause( D(U) -> Negative(skf0205(U)),235). clause( F(U) -> Neutral(skf0203(U)),236). clause( W(U) E(U) -> ,237). clause( Q(U) G(U) -> ,238). clause( W(U) N(U) -> ,239). clause( S(U) -> Neutral(skf0200(U)),240). clause( K(U) M(U) -> ,241). clause( Q(U) P(U) -> ,242). clause( C(U) M(U) -> ,243). clause( V(U) P(U) -> ,244). clause( L(U) H(U) -> ,245). clause( NEWATOMIC4(U) -> Negative(skf0195(U)),246). clause( Y(U) V(U) -> ,247). clause( M(U) -> Neutral(skf0194(U)),248). clause( I(U) P(U) -> ,249). clause( H(U) D(U) -> ,250). clause( W(U) F(U) -> ,251). clause( R(U) A(U) -> ,252). clause( V(U) Q(U) -> ,253). clause( Y(U) P(U) -> ,254). clause( P(U) -> Neutral(skf0188(U)),255). clause( V(U) E(U) -> ,256). clause( Positive(U) Negative(U) -> ,257). clause( R(U) -> Positive(skf0187(U)),258). clause( L(U) C(U) -> ,259). clause( N(U) -> Neutral(skf0185(U)),260). clause( C(U) -> Neutral(skf0184(U)),261). clause( F(U) M(U) -> ,262). clause( C(U) R(U) -> ,263). clause( I(U) -> Neutral(skf0181(U)),264). clause( A(U) M(U) -> ,265). clause( H(U) E(U) -> ,266). clause( Y(U) C(U) -> ,267). clause( K(U) I(U) -> ,268). clause( W(U) A(U) -> ,269). clause( V(U) N(U) -> ,270). clause( K(U) Q(U) -> ,271). clause( F(U) P(U) -> ,272). clause( K(U) -> Positive(skf0172(U)),273). clause( L(U) P(U) -> ,274). clause( Y(U) Q(U) -> ,275). clause( W(U) -> Neutral(skf0171(U)),276). clause( K(U) H(U) -> ,277). clause( Q(U) F(U) -> ,278). clause( F(U) E(U) -> ,279). clause( Y(U) A(U) -> ,280). clause( E(U) -> Negative(skf0168(U)),281). clause( H(U) P(U) -> ,282). clause( Neutral(U) NEWATOMIC17(U) -> ,283). clause( Negative(U) NEWATOMIC17(U) -> ,284). clause( Positive(U) NEWATOMIC17(U) -> ,285). clause( K(U) R(U) -> ,286). clause( L(U) E(U) -> ,287). clause( C(U) V(U) -> ,288). clause( W(U) R(U) -> ,289). clause( N(U) M(U) -> ,290). clause( Y(U) M(U) -> ,291). clause( R(U) V(U) -> ,292). clause( W(U) Q(U) -> ,293). clause( H(U) M(U) -> ,294). clause( A(U) Q(U) -> ,295). clause( Y(U) R(U) -> ,296). clause( I(U) Y(U) -> ,297). clause( W(U) P(U) -> ,298). clause( W(U) M(U) -> ,299). clause( L(U) M(U) -> ,300). clause( W(U) H(U) -> ,301). clause( A(U) V(U) -> ,302). clause( Y(U) F(U) -> ,303). clause( R(U) Q(U) -> ,304). clause( W(U) S(U) -> ,305). clause( Y(U) H(U) -> ,306). clause( I(U) A(U) -> ,307). clause( G(U) M(U) -> ,308). clause( I(U) V(U) -> ,309). clause( K(U) E(U) -> ,310). clause( L(U) D(U) -> ,311). clause( G(U) -> Neutral(skf0156(U)),312). clause( K(U) D(U) -> ,313). clause( K(U) F(U) -> ,314). clause( R(U) F(U) -> ,315). clause( I(U) F(U) -> ,316). clause( D(U) M(U) -> ,317). clause( H(U) -> Positive(skf0151(U)),318). clause( F(U) H(U) -> ,319). clause( F(U) NEWATOMIC18(U) -> ,320). clause( I(U) NEWATOMIC18(U) -> ,321). clause( Y(U) NEWATOMIC18(U) -> ,322). clause( W(U) NEWATOMIC18(U) -> ,323). clause( M(U) NEWATOMIC18(U) -> ,324). clause( R(U) NEWATOMIC18(U) -> ,325). clause( V(U) NEWATOMIC18(U) -> ,326). clause( H(U) NEWATOMIC18(U) -> ,327). clause( Q(U) NEWATOMIC18(U) -> ,328). clause( L(U) NEWATOMIC18(U) -> ,329). clause( K(U) NEWATOMIC18(U) -> ,330). clause( C(U) H(U) -> ,331). clause( Q(U) H(U) -> ,332). clause( K(U) A(U) -> ,333). clause( L(U) V(U) -> ,334). clause( K(U) V(U) -> ,335). clause( Y(U) E(U) -> ,336). clause( E(U) M(U) -> ,337). clause( V(U) M(U) -> ,338). clause( V(U) D(U) -> ,339). clause( L(U) Q(U) -> ,340). clause( A(U) -> Neutral(skf0142(U)),341). clause( R(U) P(U) -> ,342). clause( Y(U) -> Neutral(skf0138(U)),343). clause( V(U) -> Neutral(skf0137(U)),344). clause( I(U) M(U) -> ,345). clause( I(U) C(U) -> ,346). clause( T(U) -> Neutral(skf0131(U)),347). clause( W(U) L(U) -> ,348). clause( L(U) I(U) -> ,349). clause( I(U) Q(U) -> ,350). clause( Q(U) -> Neutral(skf0129(U)),351). clause( L(U) G(U) -> ,352). clause( H(U) G(U) -> ,353). clause( K(U) S(U) -> ,354). clause( Negative(U) Neutral(U) -> ,355). clause( R(U) M(U) -> ,356). clause( S(U) M(U) -> ,357). clause( L(U) Y(U) -> ,358). clause( N(U) H(U) -> ,359). clause( W(U) I(U) -> ,360). clause( NEWATOMIC2(U) -> Positive(skf0122(U)),361). clause( C(U) Q(U) -> ,362). clause( W(U) G(U) -> ,363). clause( K(U) Y(U) -> ,364). clause( V(U) H(U) -> ,365). clause( L(U) R(U) -> ,366). clause( Q(U) E(U) -> ,367). clause( K(U) G(U) -> ,368). clause( R(U) H(U) -> ,369). clause( W(U) V(U) -> ,370). clause( L(U) -> Neutral(skf0118(U)),371). clause( M(U) P(U) -> ,372). clause( Q(U) N(U) -> ,373). clause( K(U) L(U) -> ,374). clause( V(U) F(U) -> ,375). clause( hasCharge(U,U1)+ -> Charge(U1),376). clause( L(U) A(U) -> ,377). clause( A(U) H(U) -> ,378). clause( W(U) D(U) -> ,379). clause( L(U) N(U) -> ,380). clause( V(U) G(U) -> ,381). clause( D(U) -> hasCharge(U,skf0205(U)),382). clause( F(U) -> hasCharge(U,skf0203(U)),383). clause( S(U) -> hasCharge(U,skf0200(U)),384). clause( NEWATOMIC4(U) -> hasCharge(U,skf0195(U)),385). clause( M(U) -> hasCharge(U,skf0194(U)),386). clause( P(U) -> hasCharge(U,skf0188(U)),387). clause( R(U) -> hasCharge(U,skf0187(U)),388). clause( N(U) -> hasCharge(U,skf0185(U)),389). clause( C(U) -> hasCharge(U,skf0184(U)),390). clause( I(U) -> hasCharge(U,skf0181(U)),391). clause( K(U) -> hasCharge(U,skf0172(U)),392). clause( W(U) -> hasCharge(U,skf0171(U)),393). clause( E(U) -> hasCharge(U,skf0168(U)),394). clause( G(U) -> hasCharge(U,skf0156(U)),395). clause( H(U) -> hasCharge(U,skf0151(U)),396). clause( A(U) -> hasCharge(U,skf0142(U)),397). clause( Y(U) -> hasCharge(U,skf0138(U)),398). clause( V(U) -> hasCharge(U,skf0137(U)),399). clause( T(U) -> hasCharge(U,skf0131(U)),400). clause( Q(U) -> hasCharge(U,skf0129(U)),401). clause( NEWATOMIC2(U) -> hasCharge(U,skf0122(U)),402). clause( L(U) -> hasCharge(U,skf0118(U)),403). clause( hasCharge(U,U1)+ NEWATOMIC16(U) -> ,404). clause( AminoAcid(U) NEWATOMIC31(U) -> NEWATOMIC30(U),405). clause( hasCharge(U,U1)+ C(U) -> Neutral(U1),406). clause( hasCharge(U,U1)+ R(U) -> Positive(U1),407). clause( hasCharge(U,U1)+ G(U) -> Neutral(U1),408). clause( hasCharge(U,U1)+ H(U) -> Positive(U1),409). clause( hasCharge(U,U1)+ I(U) -> Neutral(U1),410). clause( hasCharge(U,U1)+ Q(U) -> Neutral(U1),411). clause( Charge(U) -> Positive(U) Negative(U) Neutral(U),412). clause( hasCharge(U,U1)+ F(U) -> Neutral(U1),413). clause( hasCharge(U,U1)+ V(U) -> Neutral(U1),414). clause( hasCharge(U,U1)+ W(U) -> Neutral(U1),415). clause( hasCharge(U,U1)+ E(U) -> Negative(U1),416). clause( hasCharge(U,U1)+ A(U) -> Neutral(U1),417). clause( hasCharge(U,U1)+ D(U) -> Negative(U1),418). clause( hasCharge(U,U1)+ S(U) -> Neutral(U1),419). clause( hasCharge(U,U1)+ Y(U) -> Neutral(U1),420). clause( hasCharge(U,U1)+ P(U) -> Neutral(U1),421). clause( hasCharge(U,U1)+ T(U) -> Neutral(U1),422). clause( hasCharge(U,U1)+ K(U) -> Positive(U1),423). clause( hasCharge(U,U1)+ L(U) -> Neutral(U1),424). clause( hasCharge(U,U1)+ M(U) -> Neutral(U1),425). clause( hasCharge(U,U1)+ N(U) -> Neutral(U1),426). clause( Negative(U) hasCharge(U1,U)+ NEWATOMIC22(U1) -> ,427). clause( Positive(U) hasCharge(U1,U)+ NEWATOMIC5(U1) -> ,428). clause( AminoAcid(U) NEWATOMIC10(U) -> NEWATOMIC8(U) NEWATOMIC9(U),429). clause( AminoAcid(U) NEWATOMIC28(U) -> NEWATOMIC26(U) NEWATOMIC27(U),430). clause( -> PositiveChargedAminoAcid(U) NEWATOMIC6(U),431). clause( -> NEWATOMIC25(U) Polarity(U),432). clause( -> NegativeChargedAminoAcid(U) NEWATOMIC23(U),433). clause( -> NEWATOMIC12(U) SideChainStructure(U),434). clause( Polar(U) -> Polarity(U),435). clause( NegativeChargedAminoAcid(U) -> NEWATOMIC4(U),436). clause( Aliphatic(U) -> SideChainStructure(U),437). clause( TinyPolarAminoAcid(U) -> NEWATOMIC14(U),438). clause( TinyPolarAminoAcid(U) -> NEWATOMIC13(U),439). clause( NonPolar(U) -> Polarity(U),440). clause( Aromatic(U) -> SideChainStructure(U),441). clause( G(U) -> NonPolar(skf0215(U)),442). clause( C(U) -> Polar(skf0214(U)),443). clause( A(U) D(U) -> ,444). clause( S(U) C(U) -> ,445). clause( I(U) G(U) -> ,446). clause( N(U) G(U) -> ,447). clause( S(U) F(U) -> ,448). clause( Q(U) -> Polar(skf0210(U)),449). clause( F(U) -> NonPolar(skf0209(U)),450). clause( A(U) P(U) -> ,451). clause( T(U) -> Polar(skf0204(U)),452). clause( S(U) N(U) -> ,453). clause( I(U) N(U) -> ,454). clause( G(U) E(U) -> ,455). clause( Y(U) -> Aromatic(skf0201(U)),456). clause( A(U) G(U) -> ,457). clause( NonPolar(U) Polar(U) -> ,458). clause( A(U) E(U) -> ,459). clause( L(U) -> NonPolar(skf0193(U)),460). clause( A(U) -> NonPolar(skf0191(U)),461). clause( G(U) -> Aliphatic(skf0190(U)),462). clause( D(U) P(U) -> ,463). clause( L(U) -> Aliphatic(skf0186(U)),464). clause( I(U) D(U) -> ,465). clause( S(U) D(U) -> ,466). clause( H(U) -> Polar(skf0182(U)),467). clause( W(U) -> Aromatic(skf0180(U)),468). clause( F(U) G(U) -> ,469). clause( Y(U) -> Polar(skf0177(U)),470). clause( R(U) -> Aliphatic(skf0176(U)),471). clause( M(U) -> NonPolar(skf0174(U)),472). clause( S(U) A(U) -> ,473). clause( R(U) D(U) -> ,474). clause( S(U) I(U) -> ,475). clause( S(U) Y(U) -> ,476). clause( A(U) N(U) -> ,477). clause( K(U) -> Polar(skf0167(U)),478). clause( E(U) P(U) -> ,479). clause( P(U) -> NonPolar(skf0166(U)),480). clause( V(U) -> NonPolar(skf0165(U)),481). clause( D(U) E(U) -> ,482). clause( W(U) -> NonPolar(skf0162(U)),483). clause( D(U) -> Aliphatic(skf0160(U)),484). clause( Y(U) N(U) -> ,485). clause( H(U) -> Aromatic(skf0158(U)),486). clause( C(U) -> Aliphatic(skf0157(U)),487). clause( Aliphatic(U) NEWATOMIC12(U) -> ,488). clause( Aromatic(U) NEWATOMIC12(U) -> ,489). clause( S(U) Q(U) -> ,490). clause( Polar(U) NEWATOMIC25(U) -> ,491). clause( NonPolar(U) NEWATOMIC25(U) -> ,492). clause( Y(U) D(U) -> ,493). clause( N(U) -> Polar(skf0153(U)),494). clause( Y(U) G(U) -> ,495). clause( F(U) N(U) -> ,496). clause( E(U) -> Aliphatic(skf0152(U)),497). clause( C(U) NEWATOMIC18(U) -> ,498). clause( A(U) NEWATOMIC18(U) -> ,499). clause( N(U) NEWATOMIC18(U) -> ,500). clause( S(U) NEWATOMIC18(U) -> ,501). clause( G(U) NEWATOMIC18(U) -> ,502). clause( P(U) NEWATOMIC18(U) -> ,503). clause( D(U) NEWATOMIC18(U) -> ,504). clause( E(U) NEWATOMIC18(U) -> ,505). clause( G(U) D(U) -> ,506). clause( Aliphatic(U) Aromatic(U) -> ,507). clause( NEWATOMIC11(U) -> Aromatic(skf0149(U)),508). clause( C(U) F(U) -> ,509). clause( C(U) A(U) -> ,510). clause( S(U) R(U) -> ,511). clause( L(U) S(U) -> ,512). clause( R(U) -> Polar(skf0144(U)),513). clause( N(U) E(U) -> ,514). clause( A(U) F(U) -> ,515). clause( P(U) -> Aliphatic(skf0143(U)),516). clause( E(U) -> Polar(skf0139(U)),517). clause( S(U) E(U) -> ,518). clause( F(U) -> Aromatic(skf0136(U)),519). clause( NEWATOMIC1(U) -> Aliphatic(skf0133(U)),520). clause( C(U) E(U) -> ,521). clause( G(U) P(U) -> ,522). clause( NEWATOMIC13(U) -> Polar(skf0130(U)),523). clause( hasSideChainStructure(U,U1)+ -> SideChainStructure(U1),524). clause( I(U) -> NonPolar(skf0128(U)),525). clause( V(U) -> Aliphatic(skf0127(U)),526). clause( C(U) G(U) -> ,527). clause( Q(U) D(U) -> ,528). clause( S(U) -> Polar(skf0126(U)),529). clause( K(U) -> Aliphatic(skf0125(U)),530). clause( M(U) -> Aliphatic(skf0124(U)),531). clause( N(U) D(U) -> ,532). clause( S(U) G(U) -> ,533). clause( S(U) P(U) -> ,534). clause( hasPolarity(U,U1)+ -> Polarity(U1),535). clause( R(U) N(U) -> ,536). clause( N(U) -> Aliphatic(skf0120(U)),537). clause( C(U) N(U) -> ,538). clause( I(U) -> Aliphatic(skf0119(U)),539). clause( C(U) P(U) -> ,540). clause( R(U) G(U) -> ,541). clause( C(U) D(U) -> ,542). clause( S(U) V(U) -> ,543). clause( Q(U) -> Aliphatic(skf0115(U)),544). clause( N(U) P(U) -> ,545). clause( D(U) -> Polar(skf0112(U)),546). clause( S(U) -> Aliphatic(skf0111(U)),547). clause( NEWATOMIC19(U) -> Aliphatic(skf0110(U)),548). clause( F(U) D(U) -> ,549). clause( A(U) -> Aliphatic(skf0109(U)),550). clause( T(U) -> Aliphatic(skf0108(U)),551). clause( G(U) -> hasPolarity(U,skf0215(U)),552). clause( C(U) -> hasPolarity(U,skf0214(U)),553). clause( SideChainStructure(U) -> Aliphatic(U) Aromatic(U),554). clause( Q(U) -> hasPolarity(U,skf0210(U)),555). clause( F(U) -> hasPolarity(U,skf0209(U)),556). clause( T(U) -> hasPolarity(U,skf0204(U)),557). clause( Y(U) -> hasSideChainStructure(U,skf0201(U)),558). clause( L(U) -> hasPolarity(U,skf0193(U)),559). clause( A(U) -> hasPolarity(U,skf0191(U)),560). clause( G(U) -> hasSideChainStructure(U,skf0190(U)),561). clause( L(U) -> hasSideChainStructure(U,skf0186(U)),562). clause( H(U) -> hasPolarity(U,skf0182(U)),563). clause( W(U) -> hasSideChainStructure(U,skf0180(U)),564). clause( Y(U) -> hasPolarity(U,skf0177(U)),565). clause( R(U) -> hasSideChainStructure(U,skf0176(U)),566). clause( M(U) -> hasPolarity(U,skf0174(U)),567). clause( K(U) -> hasPolarity(U,skf0167(U)),568). clause( P(U) -> hasPolarity(U,skf0166(U)),569). clause( V(U) -> hasPolarity(U,skf0165(U)),570). clause( W(U) -> hasPolarity(U,skf0162(U)),571). clause( D(U) -> hasSideChainStructure(U,skf0160(U)),572). clause( H(U) -> hasSideChainStructure(U,skf0158(U)),573). clause( C(U) -> hasSideChainStructure(U,skf0157(U)),574). clause( N(U) -> hasPolarity(U,skf0153(U)),575). clause( E(U) -> hasSideChainStructure(U,skf0152(U)),576). clause( NEWATOMIC11(U) -> hasSideChainStructure(U,skf0149(U)),577). clause( R(U) -> hasPolarity(U,skf0144(U)),578). clause( Polarity(U) -> NonPolar(U) Polar(U),579). clause( P(U) -> hasSideChainStructure(U,skf0143(U)),580). clause( E(U) -> hasPolarity(U,skf0139(U)),581). clause( hasPolarity(U,U1)+ NEWATOMIC32(U) -> ,582). clause( F(U) -> hasSideChainStructure(U,skf0136(U)),583). clause( NEWATOMIC1(U) -> hasSideChainStructure(U,skf0133(U)),584). clause( NEWATOMIC13(U) -> hasPolarity(U,skf0130(U)),585). clause( I(U) -> hasPolarity(U,skf0128(U)),586). clause( V(U) -> hasSideChainStructure(U,skf0127(U)),587). clause( S(U) -> hasPolarity(U,skf0126(U)),588). clause( K(U) -> hasSideChainStructure(U,skf0125(U)),589). clause( hasSideChainStructure(U,U1)+ NEWATOMIC29(U) -> ,590). clause( M(U) -> hasSideChainStructure(U,skf0124(U)),591). clause( N(U) -> hasSideChainStructure(U,skf0120(U)),592). clause( I(U) -> hasSideChainStructure(U,skf0119(U)),593). clause( Q(U) -> hasSideChainStructure(U,skf0115(U)),594). clause( D(U) -> hasPolarity(U,skf0112(U)),595). clause( S(U) -> hasSideChainStructure(U,skf0111(U)),596). clause( NEWATOMIC19(U) -> hasSideChainStructure(U,skf0110(U)),597). clause( A(U) -> hasSideChainStructure(U,skf0109(U)),598). clause( T(U) -> hasSideChainStructure(U,skf0108(U)),599). clause( AminoAcid(U) NEWATOMIC6(U) -> NEWATOMIC5(U),600). clause( AminoAcid(U) NEWATOMIC21(U) -> NEWATOMIC20(U),601). clause( AminoAcid(U) NEWATOMIC23(U) -> NEWATOMIC22(U),602). clause( hasSideChainStructure(U,U1)+ Q(U) -> Aliphatic(U1),603). clause( hasSideChainStructure(U,U1)+ R(U) -> Aliphatic(U1),604). clause( hasPolarity(U,U1)+ C(U) -> Polar(U1),605). clause( hasPolarity(U,U1)+ N(U) -> Polar(U1),606). clause( hasSideChainStructure(U,U1)+ V(U) -> Aliphatic(U1),607). clause( hasPolarity(U,U1)+ V(U) -> NonPolar(U1),608). clause( hasSideChainStructure(U,U1)+ Y(U) -> Aromatic(U1),609). clause( hasSideChainStructure(U,U1)+ T(U) -> Aliphatic(U1),610). clause( hasPolarity(U,U1)+ M(U) -> NonPolar(U1),611). clause( hasSideChainStructure(U,U1)+ F(U) -> Aromatic(U1),612). clause( hasPolarity(U,U1)+ T(U) -> Polar(U1),613). clause( hasSideChainStructure(U,U1)+ P(U) -> Aliphatic(U1),614). clause( hasSideChainStructure(U,U1)+ I(U) -> Aliphatic(U1),615). clause( hasSideChainStructure(U,U1)+ G(U) -> Aliphatic(U1),616). clause( hasPolarity(U,U1)+ A(U) -> NonPolar(U1),617). clause( hasPolarity(U,U1)+ I(U) -> NonPolar(U1),618). clause( hasSideChainStructure(U,U1)+ C(U) -> Aliphatic(U1),619). clause( hasPolarity(U,U1)+ W(U) -> NonPolar(U1),620). clause( hasSideChainStructure(U,U1)+ M(U) -> Aliphatic(U1),621). clause( hasSideChainStructure(U,U1)+ K(U) -> Aliphatic(U1),622). clause( hasPolarity(U,U1)+ K(U) -> Polar(U1),623). clause( hasSideChainStructure(U,U1)+ A(U) -> Aliphatic(U1),624). clause( hasPolarity(U,U1)+ L(U) -> NonPolar(U1),625). clause( hasSideChainStructure(U,U1)+ S(U) -> Aliphatic(U1),626). clause( hasPolarity(U,U1)+ R(U) -> Polar(U1),627). clause( hasSideChainStructure(U,U1)+ L(U) -> Aliphatic(U1),628). clause( hasSideChainStructure(U,U1)+ N(U) -> Aliphatic(U1),629). clause( hasPolarity(U,U1)+ Q(U) -> Polar(U1),630). clause( hasPolarity(U,U1)+ D(U) -> Polar(U1),631). clause( hasSideChainStructure(U,U1)+ H(U) -> Aromatic(U1),632). clause( hasSideChainStructure(U,U1)+ D(U) -> Aliphatic(U1),633). clause( hasPolarity(U,U1)+ Y(U) -> Polar(U1),634). clause( hasSideChainStructure(U,U1)+ W(U) -> Aromatic(U1),635). clause( hasPolarity(U,U1)+ G(U) -> NonPolar(U1),636). clause( hasPolarity(U,U1)+ H(U) -> Polar(U1),637). clause( hasSideChainStructure(U,U1)+ E(U) -> Aliphatic(U1),638). clause( hasPolarity(U,U1)+ P(U) -> NonPolar(U1),639). clause( hasPolarity(U,U1)+ S(U) -> Polar(U1),640). clause( hasPolarity(U,U1)+ F(U) -> NonPolar(U1),641). clause( hasPolarity(U,U1)+ E(U) -> Polar(U1),642). clause( Aliphatic(U) hasSideChainStructure(U1,U)+ NEWATOMIC20(U1) -> ,643). clause( Aliphatic(U) hasSideChainStructure(U1,U)+ NEWATOMIC8(U1) -> ,644). clause( Aromatic(U) hasSideChainStructure(U1,U)+ NEWATOMIC30(U1) -> ,645). clause( Polar(U) hasPolarity(U1,U)+ NEWATOMIC27(U1) -> ,646). endoflist. listofsettings(SPASS). {' setflag(Splits,0). setflag(Ordering,1). setflag(Sorts,0). setflag(Select,3). setflag(IORe,1). setflag(IOFc,1). setflag(IEmS,0). setflag(ISoR,0). setflag(RInput,0). setflag(RObv,1). setflag(RCon,1). setflag(RTaut,1). setprecedence(tt, skf00, skf01, skf02, skf03, skf04, skf05, skf06, skf07, skf08, skf09, skf010, skf011, skf012, skf013, skf014, skf015, skf016, skf017, skf018, skf019, skf020, skf021, skf022, skf023, skf024, skf025, skf026, skf027, skf028, skf029, skf030, skf031, skf032, skf033, skf034, skf035, skf036, skf037, skf038, skf039, skf040, skf041, skf042, skf043, skf044, skf045, skf046, skf047, skf048, skf049, skf050, skf051, skf052, skf053, skf054, skf055, skf056, skf057, skf058, skf059, skf060, skf061, skf062, skf063, skf064, skf065, skf066, skf067, skf068, skf069, skf070, skf071, skf072, skf073, skf074, skf075, skf076, skf077, skf078, skf079, skf080, skf081, skf082, skf083, skf084, skf085, skf086, skf087, skf088, skf089, skf090, skf091, skf092, skf093, skf094, skf095, skf096, skf097, skf098, skf099, skf0100, skf0101, skf0102, skf0103, skf0104, skf0105, skf0106, skf0107, skf0108, skf0109, skf0110, skf0111, skf0112, skf0113, skf0114, skf0115, skf0116, skf0117, skf0118, skf0119, skf0120, skf0121, skf0122, skf0123, skf0124, skf0125, skf0126, skf0127, skf0128, skf0129, skf0130, skf0131, skf0132, skf0133, skf0134, skf0135, skf0136, skf0137, skf0138, skf0139, skf0140, skf0141, skf0142, skf0143, skf0144, skf0145, skf0146, skf0147, skf0148, skf0149, skf0150, skf0151, skf0152, skf0153, skf0154, skf0155, skf0156, skf0157, skf0158, skf0159, skf0160, skf0161, skf0162, skf0163, skf0164, skf0165, skf0166, skf0167, skf0168, skf0169, skf0170, skf0171, skf0172, skf0173, skf0174, skf0175, skf0176, skf0177, skf0178, skf0179, skf0180, skf0181, skf0182, skf0183, skf0184, skf0185, skf0186, skf0187, skf0188, skf0189, skf0190, skf0191, skf0192, skf0193, skf0194, skf0195, skf0196, skf0197, skf0198, skf0199, skf0200, skf0201, skf0202, skf0203, skf0204, skf0205, skf0206, skf0207, skf0208, skf0209, skf0210, skf0211, skf0212, skf0213, skf0214, skf0215,Pp, P, Ep, E, NEWATOMIC7p, NEWATOMIC7, Fp, F, Hydrophobicp, Hydrophobic, NEWATOMIC11p, NEWATOMIC11, NEWATOMIC4p, NEWATOMIC4, Ap, A, LargeAliphaticAminoAcidp, LargeAliphaticAminoAcid, Cp, C, hasSideChainStructurep, hasSideChainStructure, NEWATOMIC29p, NEWATOMIC29, NEWATOMIC5p, NEWATOMIC5, PositiveChargedAminoAcidp, PositiveChargedAminoAcid, Polarp, Polar, NEWATOMIC2p, NEWATOMIC2, hasPolarityp, hasPolarity, NEWATOMIC0p, NEWATOMIC0, hasSizep, hasSize, NEWATOMIC22p, NEWATOMIC22, Hydrophobicityp, Hydrophobicity, NEWATOMIC10p, NEWATOMIC10, NEWATOMIC1p, NEWATOMIC1, Neutralp, Neutral, NEWATOMIC21p, NEWATOMIC21, NEWATOMIC31p, NEWATOMIC31, Rp, R, Yp, Y, hasChargep, hasCharge, Ip, I, Positivep, Positive, NEWATOMIC26p, NEWATOMIC26, NEWATOMIC25p, NEWATOMIC25, NEWATOMIC23p, NEWATOMIC23, AromaticAminoAcidp, AromaticAminoAcid, Gp, G, Np, N, NEWATOMIC3p, NEWATOMIC3, Largep, Large, hasHydrophobicityp, hasHydrophobicity, NEWATOMIC30p, NEWATOMIC30, Qp, Q, NEWATOMIC18p, NEWATOMIC18, Aliphaticp, Aliphatic, NEWATOMIC28p, NEWATOMIC28, NEWATOMIC16p, NEWATOMIC16, Tinyp, Tiny, NEWATOMIC19p, NEWATOMIC19, Dp, D, Negativep, Negative, Smallp, Small, NEWATOMIC8p, NEWATOMIC8, AminoAcidp, AminoAcid, NonPolarp, NonPolar, Hydrophilicp, Hydrophilic, Aromaticp, Aromatic, NEWATOMIC6p, NEWATOMIC6, Vp, V, Lp, L, Sp, S, NEWATOMIC24p, NEWATOMIC24, SpecificAminoAcidp, SpecificAminoAcid, Chargep, Charge, Sizep, Size, TinyPolarAminoAcidp, TinyPolarAminoAcid, NEWATOMIC27p, NEWATOMIC27, NEWATOMIC9p, NEWATOMIC9, NEWATOMIC32p, NEWATOMIC32, Kp, K, AliphaticAminoAcidp, AliphaticAminoAcid, RefiningFeaturep, RefiningFeature, Wp, W, Mp, M, Polarityp, Polarity, NEWATOMIC13p, NEWATOMIC13, Hp, H, SideChainStructurep, SideChainStructure, NEWATOMIC20p, NEWATOMIC20, NEWATOMIC12p, NEWATOMIC12, NegativeChargedAminoAcidp, NegativeChargedAminoAcid, NEWATOMIC15p, NEWATOMIC15, NEWATOMIC17p, NEWATOMIC17, NEWATOMIC14p, NEWATOMIC14, Tp, T). setselection(hasSideChainStructure, hasPolarity, hasSize, hasCharge, hasHydrophobicity). '} endoflist.endproblem."""
    //      // parse
    //      assert(SPASSParser.parse(text))
    //
    //    }


  }

}
